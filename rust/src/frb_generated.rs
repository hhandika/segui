// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.6.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -2031312007;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__sequence__alignment_services_concat_alignment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "alignment_services_concat_alignment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::sequence::AlignmentServices>::sse_decode(&mut deserializer);
            let api_prefix = <String>::sse_decode(&mut deserializer);
            let api_out_fmt_str = <String>::sse_decode(&mut deserializer);
            let api_partition_fmt = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sequence::AlignmentServices::concat_alignment(
                            &api_that,
                            api_prefix,
                            api_out_fmt_str,
                            api_partition_fmt,
                        );
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__alignment_services_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "alignment_services_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::sequence::AlignmentServices::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__alignment_services_summarize_alignment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "alignment_services_summarize_alignment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::sequence::AlignmentServices>::sse_decode(&mut deserializer);
            let api_output_prefix = <String>::sse_decode(&mut deserializer);
            let api_interval = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sequence::AlignmentServices::summarize_alignment(
                            &api_that,
                            api_output_prefix,
                            api_interval,
                        );
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__archive__archive_services_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "archive_services_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::archive::ArchiveServices::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__archive__archive_services_zip_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "archive_services_zip",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::archive::ArchiveServices>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::archive::ArchiveServices::zip(&api_that);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__contig__contig_services_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "contig_services_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::contig::ContigServices::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__contig__contig_services_summarize_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "contig_services_summarize",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::contig::ContigServices>::sse_decode(&mut deserializer);
            let api_prefix = <Option<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::contig::ContigServices::summarize(&api_that, api_prefix);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__csv__csv_summary_services_get_column_names_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "csv_summary_services_get_column_names",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::csv::CsvSummaryServices>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::csv::CsvSummaryServices::get_column_names(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__csv__csv_summary_services_get_line_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "csv_summary_services_get_line",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::csv::CsvSummaryServices>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::csv::CsvSummaryServices::get_line(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__csv__csv_summary_services_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "csv_summary_services_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input_path = <String>::sse_decode(&mut deserializer);
            let api_segul_type = <crate::api::csv::CsvSegulType>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::csv::CsvSummaryServices::new(
                        api_input_path,
                        api_segul_type,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__csv__csv_summary_services_parse_columns_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "csv_summary_services_parse_columns",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::csv::CsvSummaryServices>::sse_decode(&mut deserializer);
            let api_col_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::csv::CsvSummaryServices::parse_columns(&api_that, api_col_name),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__filtering_services_filter_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "filtering_services_filter",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::sequence::FilteringServices>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sequence::FilteringServices::filter(&api_that);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__filtering_services_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "filtering_services_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::sequence::FilteringServices::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__common__get_api_version_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_api_version",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::common::get_api_version())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__id_extraction_services_extract_id_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "id_extraction_services_extract_id",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::sequence::IDExtractionServices>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sequence::IDExtractionServices::extract_id(&api_that);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__id_extraction_services_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "id_extraction_services_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::sequence::IDExtractionServices::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__common__init_logger_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_logger",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_log_dir = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::common::init_logger(api_log_dir);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__partition_services_convert_partition_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "partition_services_convert_partition",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::sequence::PartitionServices>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sequence::PartitionServices::convert_partition(&api_that);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__partition_services_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "partition_services_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::sequence::PartitionServices::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__reads__raw_read_services_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "raw_read_services_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::reads::RawReadServices::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__reads__raw_read_services_summarize_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "raw_read_services_summarize",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::reads::RawReadServices>::sse_decode(&mut deserializer);
            let api_mode = <String>::sse_decode(&mut deserializer);
            let api_prefix = <Option<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::reads::RawReadServices::summarize(
                            &api_that, api_mode, api_prefix,
                        );
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__sequence_conversion_services_convert_sequence_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sequence_conversion_services_convert_sequence",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::sequence::SequenceConversionServices>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sequence::SequenceConversionServices::convert_sequence(
                            &api_that,
                        );
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__sequence_conversion_services_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sequence_conversion_services_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::sequence::SequenceConversionServices::new(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__sequence_extraction_extract_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sequence_extraction_extract",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::sequence::SequenceExtraction>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sequence::SequenceExtraction::extract(&api_that);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__sequence_extraction_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sequence_extraction_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::sequence::SequenceExtraction::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__sequence_removal_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sequence_removal_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::sequence::SequenceRemoval::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__sequence_removal_remove_sequence_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sequence_removal_remove_sequence",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::sequence::SequenceRemoval>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sequence::SequenceRemoval::remove_sequence(&api_that);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__sequence_renaming_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sequence_renaming_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::sequence::SequenceRenaming::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__sequence_renaming_rename_sequence_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sequence_renaming_rename_sequence",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::sequence::SequenceRenaming>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sequence::SequenceRenaming::rename_sequence(&api_that);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__show_dna_uppercase_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "show_dna_uppercase",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::sequence::show_dna_uppercase())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__split_alignment_services_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "split_alignment_services_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::sequence::SplitAlignmentServices::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__split_alignment_services_split_alignment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "split_alignment_services_split_alignment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::sequence::SplitAlignmentServices>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sequence::SplitAlignmentServices::split_alignment(&api_that);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__translation_services_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "translation_services_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::sequence::TranslationServices::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sequence__translation_services_translate_sequence_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "translation_services_translate_sequence",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::sequence::TranslationServices>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sequence::TranslationServices::translate_sequence(&api_that);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::sequence::AlignmentServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        return crate::api::sequence::AlignmentServices {
            input_files: var_inputFiles,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            output_dir: var_outputDir,
        };
    }
}

impl SseDecode for crate::api::archive::ArchiveServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_outputPath = <String>::sse_decode(deserializer);
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        return crate::api::archive::ArchiveServices {
            output_path: var_outputPath,
            input_files: var_inputFiles,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::contig::ContigServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_files = <Vec<String>>::sse_decode(deserializer);
        let mut var_fileFmt = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        return crate::api::contig::ContigServices {
            files: var_files,
            file_fmt: var_fileFmt,
            output_dir: var_outputDir,
        };
    }
}

impl SseDecode for crate::api::csv::CsvSegulType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::csv::CsvSegulType::LocusSummary,
            1 => crate::api::csv::CsvSegulType::TaxonSummary,
            2 => crate::api::csv::CsvSegulType::WholeReadSummary,
            3 => crate::api::csv::CsvSegulType::PerReadSummary,
            4 => crate::api::csv::CsvSegulType::ContigSummary,
            _ => unreachable!("Invalid variant for CsvSegulType: {}", inner),
        };
    }
}

impl SseDecode for crate::api::csv::CsvSummaryServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputPath = <String>::sse_decode(deserializer);
        let mut var_segulType = <crate::api::csv::CsvSegulType>::sse_decode(deserializer);
        return crate::api::csv::CsvSummaryServices {
            input_path: var_inputPath,
            segul_type: var_segulType,
        };
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::sequence::FilteringParams {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::sequence::FilteringParams::MinTax(var_field0);
            }
            1 => {
                let mut var_field0 = <usize>::sse_decode(deserializer);
                return crate::api::sequence::FilteringParams::AlnLen(var_field0);
            }
            2 => {
                let mut var_field0 = <usize>::sse_decode(deserializer);
                return crate::api::sequence::FilteringParams::ParsInf(var_field0);
            }
            3 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::sequence::FilteringParams::PercInf(var_field0);
            }
            4 => {
                let mut var_field0 = <Vec<String>>::sse_decode(deserializer);
                return crate::api::sequence::FilteringParams::TaxonAll(var_field0);
            }
            5 => {
                return crate::api::sequence::FilteringParams::None;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::sequence::FilteringServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        let mut var_isConcat = <bool>::sse_decode(deserializer);
        let mut var_params = <crate::api::sequence::FilteringParams>::sse_decode(deserializer);
        let mut var_outputFmt = <Option<String>>::sse_decode(deserializer);
        let mut var_prefix = <Option<String>>::sse_decode(deserializer);
        let mut var_partitionFmt = <Option<String>>::sse_decode(deserializer);
        return crate::api::sequence::FilteringServices {
            input_files: var_inputFiles,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            output_dir: var_outputDir,
            is_concat: var_isConcat,
            params: var_params,
            output_fmt: var_outputFmt,
            prefix: var_prefix,
            partition_fmt: var_partitionFmt,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::sequence::IDExtractionServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        let mut var_prefix = <Option<String>>::sse_decode(deserializer);
        let mut var_isMap = <bool>::sse_decode(deserializer);
        return crate::api::sequence::IDExtractionServices {
            input_files: var_inputFiles,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            output_dir: var_outputDir,
            prefix: var_prefix,
            is_map: var_isMap,
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::sequence::PartitionServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputPartFmt = <String>::sse_decode(deserializer);
        let mut var_output = <String>::sse_decode(deserializer);
        let mut var_outputPartFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_isUncheck = <bool>::sse_decode(deserializer);
        return crate::api::sequence::PartitionServices {
            input_files: var_inputFiles,
            input_part_fmt: var_inputPartFmt,
            output: var_output,
            output_part_fmt: var_outputPartFmt,
            datatype: var_datatype,
            is_uncheck: var_isUncheck,
        };
    }
}

impl SseDecode for crate::api::reads::RawReadServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_files = <Vec<String>>::sse_decode(deserializer);
        let mut var_fileFmt = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        return crate::api::reads::RawReadServices {
            files: var_files,
            file_fmt: var_fileFmt,
            output_dir: var_outputDir,
        };
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::sequence::SequenceConversionServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        let mut var_outputFmt = <String>::sse_decode(deserializer);
        let mut var_sort = <bool>::sse_decode(deserializer);
        return crate::api::sequence::SequenceConversionServices {
            input_files: var_inputFiles,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            output_dir: var_outputDir,
            output_fmt: var_outputFmt,
            sort: var_sort,
        };
    }
}

impl SseDecode for crate::api::sequence::SequenceExtraction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        let mut var_outputFmt = <String>::sse_decode(deserializer);
        let mut var_params =
            <crate::api::sequence::SequenceExtractionParams>::sse_decode(deserializer);
        return crate::api::sequence::SequenceExtraction {
            input_files: var_inputFiles,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            output_dir: var_outputDir,
            output_fmt: var_outputFmt,
            params: var_params,
        };
    }
}

impl SseDecode for crate::api::sequence::SequenceExtractionParams {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<String>>::sse_decode(deserializer);
                return crate::api::sequence::SequenceExtractionParams::Id(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::sequence::SequenceExtractionParams::File(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::sequence::SequenceExtractionParams::Regex(var_field0);
            }
            3 => {
                return crate::api::sequence::SequenceExtractionParams::None;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::sequence::SequenceRemoval {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        let mut var_outputFmt = <String>::sse_decode(deserializer);
        let mut var_removeRegex = <Option<String>>::sse_decode(deserializer);
        let mut var_removeList = <Option<Vec<String>>>::sse_decode(deserializer);
        return crate::api::sequence::SequenceRemoval {
            input_files: var_inputFiles,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            output_dir: var_outputDir,
            output_fmt: var_outputFmt,
            remove_regex: var_removeRegex,
            remove_list: var_removeList,
        };
    }
}

impl SseDecode for crate::api::sequence::SequenceRenaming {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        let mut var_outputFmt = <String>::sse_decode(deserializer);
        let mut var_params =
            <crate::api::sequence::SequenceRenamingParams>::sse_decode(deserializer);
        return crate::api::sequence::SequenceRenaming {
            input_files: var_inputFiles,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            output_dir: var_outputDir,
            output_fmt: var_outputFmt,
            params: var_params,
        };
    }
}

impl SseDecode for crate::api::sequence::SequenceRenamingParams {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::sequence::SequenceRenamingParams::RenameId(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::sequence::SequenceRenamingParams::RemoveStr(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <bool>::sse_decode(deserializer);
                return crate::api::sequence::SequenceRenamingParams::RemoveRegex(
                    var_field0, var_field1,
                );
            }
            3 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <String>::sse_decode(deserializer);
                return crate::api::sequence::SequenceRenamingParams::ReplaceStr(
                    var_field0, var_field1,
                );
            }
            4 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <String>::sse_decode(deserializer);
                let mut var_field2 = <bool>::sse_decode(deserializer);
                return crate::api::sequence::SequenceRenamingParams::ReplaceRegex(
                    var_field0, var_field1, var_field2,
                );
            }
            5 => {
                return crate::api::sequence::SequenceRenamingParams::None;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::sequence::SplitAlignmentServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputFile = <String>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_inputPartition = <Option<String>>::sse_decode(deserializer);
        let mut var_inputPartitionFmt = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        let mut var_prefix = <Option<String>>::sse_decode(deserializer);
        let mut var_outputFmt = <String>::sse_decode(deserializer);
        let mut var_isUncheck = <bool>::sse_decode(deserializer);
        return crate::api::sequence::SplitAlignmentServices {
            input_file: var_inputFile,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            input_partition: var_inputPartition,
            input_partition_fmt: var_inputPartitionFmt,
            output_dir: var_outputDir,
            prefix: var_prefix,
            output_fmt: var_outputFmt,
            is_uncheck: var_isUncheck,
        };
    }
}

impl SseDecode for crate::api::sequence::TranslationServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        let mut var_outputFmt = <String>::sse_decode(deserializer);
        let mut var_table = <String>::sse_decode(deserializer);
        let mut var_readingFrame = <usize>::sse_decode(deserializer);
        return crate::api::sequence::TranslationServices {
            input_files: var_inputFiles,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            output_dir: var_outputDir,
            output_fmt: var_outputFmt,
            table: var_table,
            reading_frame: var_readingFrame,
        };
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__sequence__alignment_services_concat_alignment_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        2 => wire__crate__api__sequence__alignment_services_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        3 => wire__crate__api__sequence__alignment_services_summarize_alignment_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        4 => {
            wire__crate__api__archive__archive_services_new_impl(port, ptr, rust_vec_len, data_len)
        }
        5 => {
            wire__crate__api__archive__archive_services_zip_impl(port, ptr, rust_vec_len, data_len)
        }
        6 => wire__crate__api__contig__contig_services_new_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__crate__api__contig__contig_services_summarize_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        8 => wire__crate__api__csv__csv_summary_services_get_column_names_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        9 => wire__crate__api__csv__csv_summary_services_get_line_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        10 => {
            wire__crate__api__csv__csv_summary_services_new_impl(port, ptr, rust_vec_len, data_len)
        }
        11 => wire__crate__api__csv__csv_summary_services_parse_columns_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        12 => wire__crate__api__sequence__filtering_services_filter_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        13 => wire__crate__api__sequence__filtering_services_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        14 => wire__crate__api__common__get_api_version_impl(port, ptr, rust_vec_len, data_len),
        15 => wire__crate__api__sequence__id_extraction_services_extract_id_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        16 => wire__crate__api__sequence__id_extraction_services_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        17 => wire__crate__api__common__init_logger_impl(port, ptr, rust_vec_len, data_len),
        18 => wire__crate__api__sequence__partition_services_convert_partition_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        19 => wire__crate__api__sequence__partition_services_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        20 => {
            wire__crate__api__reads__raw_read_services_new_impl(port, ptr, rust_vec_len, data_len)
        }
        21 => wire__crate__api__reads__raw_read_services_summarize_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        22 => wire__crate__api__sequence__sequence_conversion_services_convert_sequence_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        23 => wire__crate__api__sequence__sequence_conversion_services_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        24 => wire__crate__api__sequence__sequence_extraction_extract_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        25 => wire__crate__api__sequence__sequence_extraction_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        26 => {
            wire__crate__api__sequence__sequence_removal_new_impl(port, ptr, rust_vec_len, data_len)
        }
        27 => wire__crate__api__sequence__sequence_removal_remove_sequence_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        28 => wire__crate__api__sequence__sequence_renaming_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        29 => wire__crate__api__sequence__sequence_renaming_rename_sequence_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        30 => {
            wire__crate__api__sequence__show_dna_uppercase_impl(port, ptr, rust_vec_len, data_len)
        }
        31 => wire__crate__api__sequence__split_alignment_services_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        32 => wire__crate__api__sequence__split_alignment_services_split_alignment_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        33 => wire__crate__api__sequence__translation_services_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        34 => wire__crate__api__sequence__translation_services_translate_sequence_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::AlignmentServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_files.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::AlignmentServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::AlignmentServices>
    for crate::api::sequence::AlignmentServices
{
    fn into_into_dart(self) -> crate::api::sequence::AlignmentServices {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::archive::ArchiveServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.output_path.into_into_dart().into_dart(),
            self.input_files.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::archive::ArchiveServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::archive::ArchiveServices>
    for crate::api::archive::ArchiveServices
{
    fn into_into_dart(self) -> crate::api::archive::ArchiveServices {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::contig::ContigServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.files.into_into_dart().into_dart(),
            self.file_fmt.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::contig::ContigServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::contig::ContigServices>
    for crate::api::contig::ContigServices
{
    fn into_into_dart(self) -> crate::api::contig::ContigServices {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::csv::CsvSegulType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::LocusSummary => 0.into_dart(),
            Self::TaxonSummary => 1.into_dart(),
            Self::WholeReadSummary => 2.into_dart(),
            Self::PerReadSummary => 3.into_dart(),
            Self::ContigSummary => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::csv::CsvSegulType {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::csv::CsvSegulType>
    for crate::api::csv::CsvSegulType
{
    fn into_into_dart(self) -> crate::api::csv::CsvSegulType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::csv::CsvSummaryServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_path.into_into_dart().into_dart(),
            self.segul_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::csv::CsvSummaryServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::csv::CsvSummaryServices>
    for crate::api::csv::CsvSummaryServices
{
    fn into_into_dart(self) -> crate::api::csv::CsvSummaryServices {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::FilteringParams {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::sequence::FilteringParams::MinTax(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::sequence::FilteringParams::AlnLen(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::sequence::FilteringParams::ParsInf(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::sequence::FilteringParams::PercInf(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::sequence::FilteringParams::TaxonAll(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::sequence::FilteringParams::None => [5.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::FilteringParams
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::FilteringParams>
    for crate::api::sequence::FilteringParams
{
    fn into_into_dart(self) -> crate::api::sequence::FilteringParams {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::FilteringServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_files.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
            self.is_concat.into_into_dart().into_dart(),
            self.params.into_into_dart().into_dart(),
            self.output_fmt.into_into_dart().into_dart(),
            self.prefix.into_into_dart().into_dart(),
            self.partition_fmt.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::FilteringServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::FilteringServices>
    for crate::api::sequence::FilteringServices
{
    fn into_into_dart(self) -> crate::api::sequence::FilteringServices {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::IDExtractionServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_files.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
            self.prefix.into_into_dart().into_dart(),
            self.is_map.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::IDExtractionServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::IDExtractionServices>
    for crate::api::sequence::IDExtractionServices
{
    fn into_into_dart(self) -> crate::api::sequence::IDExtractionServices {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::PartitionServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_files.into_into_dart().into_dart(),
            self.input_part_fmt.into_into_dart().into_dart(),
            self.output.into_into_dart().into_dart(),
            self.output_part_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.is_uncheck.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::PartitionServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::PartitionServices>
    for crate::api::sequence::PartitionServices
{
    fn into_into_dart(self) -> crate::api::sequence::PartitionServices {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::reads::RawReadServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.files.into_into_dart().into_dart(),
            self.file_fmt.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::reads::RawReadServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::reads::RawReadServices>
    for crate::api::reads::RawReadServices
{
    fn into_into_dart(self) -> crate::api::reads::RawReadServices {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::SequenceConversionServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_files.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
            self.output_fmt.into_into_dart().into_dart(),
            self.sort.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::SequenceConversionServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::SequenceConversionServices>
    for crate::api::sequence::SequenceConversionServices
{
    fn into_into_dart(self) -> crate::api::sequence::SequenceConversionServices {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::SequenceExtraction {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_files.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
            self.output_fmt.into_into_dart().into_dart(),
            self.params.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::SequenceExtraction
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::SequenceExtraction>
    for crate::api::sequence::SequenceExtraction
{
    fn into_into_dart(self) -> crate::api::sequence::SequenceExtraction {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::SequenceExtractionParams {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::sequence::SequenceExtractionParams::Id(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::sequence::SequenceExtractionParams::File(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::sequence::SequenceExtractionParams::Regex(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::sequence::SequenceExtractionParams::None => [3.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::SequenceExtractionParams
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::SequenceExtractionParams>
    for crate::api::sequence::SequenceExtractionParams
{
    fn into_into_dart(self) -> crate::api::sequence::SequenceExtractionParams {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::SequenceRemoval {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_files.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
            self.output_fmt.into_into_dart().into_dart(),
            self.remove_regex.into_into_dart().into_dart(),
            self.remove_list.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::SequenceRemoval
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::SequenceRemoval>
    for crate::api::sequence::SequenceRemoval
{
    fn into_into_dart(self) -> crate::api::sequence::SequenceRemoval {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::SequenceRenaming {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_files.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
            self.output_fmt.into_into_dart().into_dart(),
            self.params.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::SequenceRenaming
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::SequenceRenaming>
    for crate::api::sequence::SequenceRenaming
{
    fn into_into_dart(self) -> crate::api::sequence::SequenceRenaming {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::SequenceRenamingParams {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::sequence::SequenceRenamingParams::RenameId(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::sequence::SequenceRenamingParams::RemoveStr(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::sequence::SequenceRenamingParams::RemoveRegex(field0, field1) => [
                2.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::sequence::SequenceRenamingParams::ReplaceStr(field0, field1) => [
                3.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::sequence::SequenceRenamingParams::ReplaceRegex(field0, field1, field2) => [
                4.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
                field2.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::sequence::SequenceRenamingParams::None => [5.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::SequenceRenamingParams
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::SequenceRenamingParams>
    for crate::api::sequence::SequenceRenamingParams
{
    fn into_into_dart(self) -> crate::api::sequence::SequenceRenamingParams {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::SplitAlignmentServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_file.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.input_partition.into_into_dart().into_dart(),
            self.input_partition_fmt.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
            self.prefix.into_into_dart().into_dart(),
            self.output_fmt.into_into_dart().into_dart(),
            self.is_uncheck.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::SplitAlignmentServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::SplitAlignmentServices>
    for crate::api::sequence::SplitAlignmentServices
{
    fn into_into_dart(self) -> crate::api::sequence::SplitAlignmentServices {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::sequence::TranslationServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_files.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
            self.output_fmt.into_into_dart().into_dart(),
            self.table.into_into_dart().into_dart(),
            self.reading_frame.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::TranslationServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::TranslationServices>
    for crate::api::sequence::TranslationServices
{
    fn into_into_dart(self) -> crate::api::sequence::TranslationServices {
        self
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::sequence::AlignmentServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <String>::sse_encode(self.output_dir, serializer);
    }
}

impl SseEncode for crate::api::archive::ArchiveServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.output_path, serializer);
        <Vec<String>>::sse_encode(self.input_files, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::contig::ContigServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.files, serializer);
        <String>::sse_encode(self.file_fmt, serializer);
        <String>::sse_encode(self.output_dir, serializer);
    }
}

impl SseEncode for crate::api::csv::CsvSegulType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::csv::CsvSegulType::LocusSummary => 0,
                crate::api::csv::CsvSegulType::TaxonSummary => 1,
                crate::api::csv::CsvSegulType::WholeReadSummary => 2,
                crate::api::csv::CsvSegulType::PerReadSummary => 3,
                crate::api::csv::CsvSegulType::ContigSummary => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::csv::CsvSummaryServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.input_path, serializer);
        <crate::api::csv::CsvSegulType>::sse_encode(self.segul_type, serializer);
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::sequence::FilteringParams {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::sequence::FilteringParams::MinTax(field0) => {
                <i32>::sse_encode(0, serializer);
                <f64>::sse_encode(field0, serializer);
            }
            crate::api::sequence::FilteringParams::AlnLen(field0) => {
                <i32>::sse_encode(1, serializer);
                <usize>::sse_encode(field0, serializer);
            }
            crate::api::sequence::FilteringParams::ParsInf(field0) => {
                <i32>::sse_encode(2, serializer);
                <usize>::sse_encode(field0, serializer);
            }
            crate::api::sequence::FilteringParams::PercInf(field0) => {
                <i32>::sse_encode(3, serializer);
                <f64>::sse_encode(field0, serializer);
            }
            crate::api::sequence::FilteringParams::TaxonAll(field0) => {
                <i32>::sse_encode(4, serializer);
                <Vec<String>>::sse_encode(field0, serializer);
            }
            crate::api::sequence::FilteringParams::None => {
                <i32>::sse_encode(5, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::sequence::FilteringServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <String>::sse_encode(self.output_dir, serializer);
        <bool>::sse_encode(self.is_concat, serializer);
        <crate::api::sequence::FilteringParams>::sse_encode(self.params, serializer);
        <Option<String>>::sse_encode(self.output_fmt, serializer);
        <Option<String>>::sse_encode(self.prefix, serializer);
        <Option<String>>::sse_encode(self.partition_fmt, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::sequence::IDExtractionServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <String>::sse_encode(self.output_dir, serializer);
        <Option<String>>::sse_encode(self.prefix, serializer);
        <bool>::sse_encode(self.is_map, serializer);
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::sequence::PartitionServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_part_fmt, serializer);
        <String>::sse_encode(self.output, serializer);
        <String>::sse_encode(self.output_part_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <bool>::sse_encode(self.is_uncheck, serializer);
    }
}

impl SseEncode for crate::api::reads::RawReadServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.files, serializer);
        <String>::sse_encode(self.file_fmt, serializer);
        <String>::sse_encode(self.output_dir, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::sequence::SequenceConversionServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <String>::sse_encode(self.output_dir, serializer);
        <String>::sse_encode(self.output_fmt, serializer);
        <bool>::sse_encode(self.sort, serializer);
    }
}

impl SseEncode for crate::api::sequence::SequenceExtraction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <String>::sse_encode(self.output_dir, serializer);
        <String>::sse_encode(self.output_fmt, serializer);
        <crate::api::sequence::SequenceExtractionParams>::sse_encode(self.params, serializer);
    }
}

impl SseEncode for crate::api::sequence::SequenceExtractionParams {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::sequence::SequenceExtractionParams::Id(field0) => {
                <i32>::sse_encode(0, serializer);
                <Vec<String>>::sse_encode(field0, serializer);
            }
            crate::api::sequence::SequenceExtractionParams::File(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::sequence::SequenceExtractionParams::Regex(field0) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::sequence::SequenceExtractionParams::None => {
                <i32>::sse_encode(3, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::sequence::SequenceRemoval {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <String>::sse_encode(self.output_dir, serializer);
        <String>::sse_encode(self.output_fmt, serializer);
        <Option<String>>::sse_encode(self.remove_regex, serializer);
        <Option<Vec<String>>>::sse_encode(self.remove_list, serializer);
    }
}

impl SseEncode for crate::api::sequence::SequenceRenaming {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <String>::sse_encode(self.output_dir, serializer);
        <String>::sse_encode(self.output_fmt, serializer);
        <crate::api::sequence::SequenceRenamingParams>::sse_encode(self.params, serializer);
    }
}

impl SseEncode for crate::api::sequence::SequenceRenamingParams {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::sequence::SequenceRenamingParams::RenameId(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::sequence::SequenceRenamingParams::RemoveStr(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::sequence::SequenceRenamingParams::RemoveRegex(field0, field1) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
                <bool>::sse_encode(field1, serializer);
            }
            crate::api::sequence::SequenceRenamingParams::ReplaceStr(field0, field1) => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(field0, serializer);
                <String>::sse_encode(field1, serializer);
            }
            crate::api::sequence::SequenceRenamingParams::ReplaceRegex(field0, field1, field2) => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(field0, serializer);
                <String>::sse_encode(field1, serializer);
                <bool>::sse_encode(field2, serializer);
            }
            crate::api::sequence::SequenceRenamingParams::None => {
                <i32>::sse_encode(5, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::sequence::SplitAlignmentServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.input_file, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <Option<String>>::sse_encode(self.input_partition, serializer);
        <String>::sse_encode(self.input_partition_fmt, serializer);
        <String>::sse_encode(self.output_dir, serializer);
        <Option<String>>::sse_encode(self.prefix, serializer);
        <String>::sse_encode(self.output_fmt, serializer);
        <bool>::sse_encode(self.is_uncheck, serializer);
    }
}

impl SseEncode for crate::api::sequence::TranslationServices {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <String>::sse_encode(self.output_dir, serializer);
        <String>::sse_encode(self.output_fmt, serializer);
        <String>::sse_encode(self.table, serializer);
        <usize>::sse_encode(self.reading_frame, serializer);
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.6.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.6.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
